:silent
import BIDMat.FFilter._
import BIDMat.GFilter
import BIDMat.GFilter._

Mat.useCache = true;
BIDMat.FFilter.im2colThreshold = 0

val din = 128;
val fh = 3;
val npad = 1;
val nstride = 1;
val h = 28;
val w = h;
val dout = 128;
val n = 16;
val nreps = 100;

Mat.useMKL = true;

val a = FND(irow(din,h,w,n));
a(?) = rand(a.length,1);
val aa = GND(a);

val b = FFilter2Ddn(fh,fh,din,dout,nstride,npad);
val b1 = FFilter2Ddn(fh,fh,din,dout,nstride,npad);
val b2 = FFilter2Ddn(fh,fh,din,dout,nstride,npad);
b(?) = rand(b.length,1);
val bt = FFilter2Ddn(fh,fh,din,dout,nstride,npad);
bt(?) = (b.reshape(dout, din, fh, fh).transpose(irow(1,2,3,0)))(?)
val bb = GFilter(bt);
val bb2 = GFilter(b2);

bb.tensorFormat=jcuda.jcudnn.cudnnTensorFormat.CUDNN_TENSOR_NHWC
//bb.tensorFormat=jcuda.jcudnn.cudnnTensorFormat.CUDNN_TENSOR_NCHW                           // Needed for GEMM
bb.fwdAlgo = jcuda.jcudnn.cudnnConvolutionFwdAlgo.CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM
//bb.fwdAlgo = jcuda.jcudnn.cudnnConvolutionFwdAlgo.CUDNN_CONVOLUTION_FWD_ALGO_DIRECT
//bb.fwdAlgo = jcuda.jcudnn.cudnnConvolutionFwdAlgo.CUDNN_CONVOLUTION_FWD_ALGO_GEMM          // Generally fastest
//bb.fwdAlgo = jcuda.jcudnn.cudnnConvolutionFwdAlgo.CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD
bb.convType = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION
//bb.convType = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CONVOLUTION

val c1 = b.convolve(a)

flip;
for (i <- 0 until nreps) {b.convolve(a, c1, true)};
val gf1=gflop;

val cc = bb.convolve(aa)

val c2 = FND(cc);

flip;
for (i <- 0 until nreps) {bb.convolve(aa, cc, true)};
val gf2=gflop;

val d1 = b.convolveT(c1);
val cc1 = GND(c1);

val dd2 = bb.convolveT(cc1);
val d2 = FND(dd2);

flip;
for (i <- 0 until nreps) {b.convolveT(c1, d1, true)};
val gf3=gflop;

flip;
for (i <- 0 until nreps) {bb.convolveT(cc1, dd2, true)};
val gf4=gflop;

b1.convolveM(a,c1);

cc <-- c1;
bb2.convolveM(aa,cc);
b2 <-- bb2;

flip;
for (i <- 0 until nreps) {b1.convolveM(a, c1)};
val gf5=gflop;

flip;
for (i <- 0 until nreps) {bb2.convolveM(aa, cc)};
val gf6=gflop;


:silent
(gf1, gf2, gf3, gf4, gf5, gf6)
(maxi(abs(c1-c2)(?)), maxi(abs(d1-d2)(?)), maxi(abs(b1-b2)(?)))
