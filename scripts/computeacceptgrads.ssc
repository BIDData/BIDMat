:silent

// Resolution in sigma for the table. 
val nsigma = 280;
//val nsigma = 10;

// Resolution of the table (half the number of columns). 
val n = 10000;

val d0 = loadDMat("sigmaN%d_M%d_v3_smooth.dmat.lz4" format (nsigma, n));

val xmin = d0(0,1)
val xmax = d0(0,2)
val xs = row(-n to n)*(xmax-xmin)/n/2
val sigmas = d0(?,0)
val sigmamin = d0(0,0)
val sigmamax = d0(0,d0.nrows-1)
val sigma0s = dzeros(nsigma,1)
val accepts = dzeros(nsigma,1)
val atable = dzeros(nsigma, n*2+1);
val adx = dzeros(nsigma, n*2+1);

val sigSchedule = (
   0.05 \ 0.8 on
   0.1 \ 0.70 on 
   0.2 \ 0.68 on
   0.3 \ 0.66 on 
   0.4 \ 0.65 on
   0.5 \ 0.63 on 
   0.6 \ 0.61 on
   0.7 \ 0.58 on 
   0.8 \ 0.54 on
   0.9 \ 0.49 on 
   0.95 \ 0.4 );

// Look up the correction for a given acceptance value (interpolate the table above)
def sigCorrection(accept:Double) = { 
  var i = 0;
  while (i + 2 < sigSchedule.nrows && sigSchedule(i+1,0) < accept) { 
    i += 1;
  }
  val alpha = (accept - sigSchedule(i, 0)) / (sigSchedule(i+1,0) - sigSchedule(i, 0));
  alpha * sigSchedule(i+1, 1) + (1-alpha) * sigSchedule(i, 1);
}

def sigma0(accept:Double) = { 
  val xn = normcdfinv(drow(accept));
  (exp(-xn*xn/2) * math.sqrt(2 / scala.math.Pi) / accept).v;
}

def acceptfn(sigma:Double) = { 
  val epsilon = 1e-8;
  var upper = 0.95;
  var lower = 0.05;
  var guess = 0.0;
  while (upper - lower > epsilon) { 
    guess = (upper+lower)/2;
    if (sigma0(guess) * sigCorrection(guess) < sigma) { 
      upper = guess;
    } else { 
      lower = guess;
    }
  }
  guess
}

def func1(q:Double, x:DMat) = exp(x/2) / ((2 * cosh(x * q / 2)) ^ (1f/q));

def derivx(q:Double, x:DMat) = 0.5f*func1(q, x)*@(1f-tanh(q/2*x));

def derivq(q:Double, x:DMat) = func1(q,x)*@(ln(2*cosh(q/2*x))/(q*q)-x/(2*q)*@tanh(q/2*x));

for (isigma <- 0 until nsigma) { 
  val sigma = sigmas(isigma)
  val accept = acceptfn(sigma)
  accepts(isigma) = accept
  sigma0s(isigma) = sigma / sigCorrection(accept)
  val q = -math.log(2)/math.log(accept);
  atable(isigma, ?) = func1(q, xs)
  adx(isigma, ?) = derivx(q, xs)
}


//val d = d0(?,3->d0.ncols)
val d = atable
val dx = ((d(?,1->d.ncols)\dones(nsigma,1)) - (dzeros(nsigma,1)\d(?,0->(d.ncols-1))))*n/(xmax-xmin);

val dvar0 = (d(1,?)-d(0,?)) / (sigmas(1)-sigmas(0));
val dvar1 = (d(2->d.nrows,?)-d(0->(d.nrows-2),?)) / (sigmas(2->nsigma,0)-sigmas(0->(nsigma-2),0));
val dvar2 = (d(nsigma-1,?)-d(nsigma-2,?)) / (sigmas(nsigma-1)-sigmas(nsigma-2));

val dvar = dvar0 on dvar1 on dvar2

val mainterm = d + xs *@ dx

def slice(alpha:Double) = { 
  val xv = sigmas * alpha;
  val xinds = int((xv - xmin)/(xmax - xmin)*(2*n));
  val minds = icol(0->nsigma) + xinds * nsigma;
  d(minds);
}

def slice2(alpha:Double) = { 
  val xv = sigmas * alpha;
  val xinds = int((xv - xmin)/(xmax - xmin)*(2*n));
  val minds = icol(0->nsigma) + xinds * nsigma;
  dx(minds) \ dvar(minds);
}

:silent
