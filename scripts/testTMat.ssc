import BIDMat.TMat

def testTMatmadd(){
    val b=TMat(4,4,Array(1,2),Array(0,3),Array(GMat(FMat(2,3,Array(1,2,3,4,5,6))),GMat(FMat(2,1,Array(7,8)))));
    println(full(b))
    val c=grand(5,4);
    val d=c.zeros(4,5);
    b.madd(c,d,true,true);
    val bb=full(b);
    val dd=c.zeros(4,5)
    bb.madd(c,dd,true,true)
    println(sum(sum(d-dd)))
}

def testGMatmadd(){
    val b=TMat(4,4,Array(1,2),Array(0,3),Array(GMat(FMat(2,3,Array(1,2,3,4,5,6))),GMat(FMat(2,1,Array(7,8)))));
    val c=grand(4,5)
    val d=grand(5,4)
    val bb=d.zeros(4,4)
    bb<--full(b)
    c.madd(d,b,false,false)
    c.madd(d,bb,false,false)
    println(bb)
    println(full(b))
    //println(b-bb)
    //println(sum(sum(full(b)-bb)))
}

testTMatmadd()
testGMatmadd()

/*val b=TMat(4,4,Array(0),Array(1),Array(GMat(FMat(2,3,Array(1,2,3,4,5,6)))));
full(b)
val a=b.ones(1,1)
full(a)
val c:Mat =b
val d=b.zeros(4,4)
d~c*@c
full(d)
a.set(5f)
d~c*@a
full(d)
c~d+b
full(c)
val g=GMat(1,1)
g.set(2f)
val c:Mat = b
full(b)
full(c^g)
b~b/(c^g)
full(b)*/
