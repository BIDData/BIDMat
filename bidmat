#!/bin/bash
# export JAVA_HOME="" # Set here if not set in environment
# set CUDA_HOME=""   # set if desired, otherwise defaults to /usr/local/cuda
# note CUDA_PATH="" # Should be set to the latest toolkit in Windows
# Change these if needed
MEMSIZE="-Xmx14G"
BLAS_ROOT="/code/QSML"
JOCL_VERSION="2.0.1-SNAPSHOT"
export JAVA_OPTS="${MEMSIZE} -Xms128M -Dfile.encoding=UTF-8" # Set as much memory as possible
BIDMAT_ROOT="${BASH_SOURCE[0]}"
if [ ! `uname` = "Darwin" ]; then
  BIDMAT_ROOT=`readlink -f "${BIDMAT_ROOT}"`
else 
  while [ -L "${BIDMAT_ROOT}" ]; do
    BIDMAT_ROOT=`readlink "${BIDMAT_ROOT}"`
  done
fi
BIDMAT_ROOT=`dirname "$BIDMAT_ROOT"`
pushd "${BIDMAT_ROOT}" > /dev/null
BIDMAT_ROOT=`pwd`
BIDMAT_ROOT="$( echo ${BIDMAT_ROOT} | sed s+/cygdrive/c+c:+ )" 
JCUDA_LIBDIR=${BIDMAT_ROOT}/lib
JOCL_LIBDIR=${BIDMAT_ROOT}/lib
LIBDIR=${BIDMAT_ROOT}/lib

JCUDA_VERSION=`echo lib/jcuda-natives-*.jar | sed 's/.*jcuda-natives-//' | sed 's/-.*\.jar//'`
BIDMAT_VERSION=`echo lib/BIDMat-*-cpu-*.jar | sed 's/.*BIDMat-//' | sed 's/-cpu.*\.jar//'`

popd  > /dev/null
OS=`uname -a`
if [ "$ARCH" = "" ]; then
    ARCH=`arch`
fi
if [[ "$OS" == Darwin* ]] ; then
    if [[ "$OS" == *x86_64 ]] ; then
	    ARCH="x86_64"
    fi
    OS="apple"
elif [[ "$OS" == Linux* ]] ; then
    OS="linux"
elif [[ "$OS" == CYGWIN* ]] ; then
    if [[ "$OS" == *WOW* ]] ; then
        ARCH="x86_64"
    fi
	OS="windows"
else
    echo "OS not supported" $OS
    exit 1
fi

if [ "$OS" = "Windows_NT" ]; then
    if [ ! "${JAVA_HOME}" = "" ]; then
        JAVA_HOME=`${BIDMAT_ROOT}/shortpath.bat "${JAVA_HOME}"`
	    export JAVA_HOME=`echo ${JAVA_HOME} | sed 's_\\\\_/_g'`/bin
    fi
fi

BIDMAT_LIBS="${BIDMAT_ROOT}/target/BIDMat-${BIDMAT_VERSION}.jar;\
${LIBDIR}/BIDMat-${BIDMAT_VERSION}-cpu-${OS}-${ARCH}.jar;\
${LIBDIR}/BIDMat-${BIDMAT_VERSION}-gpu-${OS}-${ARCH}.jar;\
${LIBDIR}/ptplot.jar;${LIBDIR}/ptplotapplication.jar;\
${LIBDIR}/jhdf5-3.2.1.jar;${LIBDIR}/jhdf5-3.2.1-${OS}-${ARCH}.jar;\
${LIBDIR}/commons-math3-3.2.jar;${LIBDIR}/lz4-1.3.jar;${LIBDIR}/json-io-4.1.6.jar;\
${LIBDIR}/jfreechart-1.0.19.jar;${LIBDIR}/jcommon-1.0.23.jar"

JCUDA_LIBS=""
for lib in jcuda jcublas jcufft jcurand jcusolver jcusparse; do
    JCUDA_LIBS="${JCUDA_LIBS};${LIBDIR}/${lib}-${JCUDA_VERSION}.jar;${LIBDIR}/${lib}-natives-${JCUDA_VERSION}-${OS}-${ARCH}.jar"
done

if [ ! -e ${LIBDIR}/IScala.jar ]; then
    echo "Downloading Iscala jar"
    source="http://people.eecs.berkeley.edu/~jfc/biddata"
    curl -o ${LIBDIR}/IScala.jar ${source}/lib/IScala.jar
fi

JOCL_LIBS="${JOCL_LIBDIR}/jocl-${JOCL_VERSION}.jar"

ALL_LIBS="${LIBDIR}/IScala.jar;${BIDMAT_LIBS};${JCUDA_LIBS};${JOCL_LIBS};${JAVA_HOME}/lib/tools.jar"

if [ "$OS" = "Windows_NT" ]; then
    if [ ! "${CUDA_PATH}" = "" ]; then
	    NEWPATH=`${BIDMAT_ROOT}/shortpath.bat "${CUDA_PATH}"`
	    NEWPATH=`echo $NEWPATH | sed 's_\\\\_/_g'`/bin
    fi
else
    ALL_LIBS=`echo "${ALL_LIBS}" | sed 's/;/:/g'`
fi

if [ "$1" = "notebook" ]; then
    shift 1
    if [ ! -z "$@" ]; then
        KERNEL_CMD="[\"java\", \"-cp\", \"${ALL_LIBS}\", \"${MEMSIZE}\", \"-Xms128M\", \
       \"-Dfile.encoding=UTF-8\", \"org.refptr.iscala.IScala\", \"--profile\", \"{connection_file}\", \"--parent\", \"$@\"]"
    else
        KERNEL_CMD="[\"java\", \"-cp\", \"${ALL_LIBS}\", \"${MEMSIZE}\", \"-Xms128M\", \
       \"-Dfile.encoding=UTF-8\", \"org.refptr.iscala.IScala\", \"--profile\", \"{connection_file}\", \"--parent\"]"
    fi
    ipython notebook --profile=scala --KernelManager.kernel_cmd="$KERNEL_CMD"
else
    ${BIDMAT_ROOT}/scripts/scala/scala -Dscala.repl.maxprintstring=6000 -nobootcp -toolcp "${ALL_LIBS}" -cp "${ALL_LIBS}" -Yrepl-sync -i ${LIBDIR}/bidmat_init.scala "$@"
fi
