#!/bin/bash

OS=`uname`
PARLIB=$1
ARCH="x86_64"
 
VERSION="dev"

# standardise the OS and ARCH names
if [ "$OS" = "Darwin" ] ; then
	OS="apple"
elif [ "$OS" = "Linux" ] ; then
	OS="linux"
elif [[ "$OS" == CYGWIN* ]] ; then
	OS="windows"
else
	echo "OS not supported" $OS
	exit 1
fi

if [ "$ARCH" = "x86" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "i586" ] \
	|| [ "$ARCH" = "i486" ] || [ "$ARCH" = "i386" ] ; then
	ARCH="x86"
elif [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ] ; then
	ARCH="x86_64"
else
	echo "ARCH not supported"
	exit 1
fi

if [ "$OS" = "apple" ] ; then
        MKL_ROOT="/opt/intel/mkl"
        JAVA_HOME="/System/Library/Frameworks/JavaVM.framework"
        CUDA_HOME="/usr/local/cuda"
        JCUDA_HOME="$HOME/code/JCUDA5"
        CC="icc"
        GCC="gcc"
        NVCC="nvcc"
        NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine 64  -Xcompiler \"-fPIC -c -O2 -g -DNDEBUG\""
        SUBLIB=osx64
#        SUBLIB=osx32
	ARCHD=intel64
	SUBARCH=/lp64
#	ARCHD=ia32
	OBJ="o"
	OUTFLG="-o "
	CPPFLAGS="-fPIC -c -O2 -openmp -DNDEBUG -I$JAVA_HOME/Headers -I$JCUDA_HOME/CommonJNI/src -I$CUDA_HOME/include"
	CFLAGS="-fPIC -c -O2 -openmp -DNDEBUG -std=c99 -I$JAVA_HOME/Headers -I$MKL_ROOT/include -I$MKL_ROOT/include/${ARCHD}${SUBARCH}"
	LB="ar rc"    
	GLD="icc -bundle -static-intel"
	LD="icc -bundle -static-intel"
	LDFLAGS="$LDFLAGS"
	LIBPREPEND="lib"
	LIBAPPEND="-apple-x86_64.dylib"
	FC="gfortran"
	FFLAGS="$CFLAGS"
	LAPACK_INCLUDES=""
	FORTRAN_LIBS="-lgfortran"
	if [ "$PARLIB" = "sequential" ] ; then
	MKL_LIBS="-L$JAVA_HOME/Libraries -L/opt/intel/composerxe/lib/${ARCHD} \ 
            $MKL_ROOT/lib/libmkl_intel_lp64.a $MKL_ROOT/lib/libmkl_sequential.a \
            $MKL_ROOT/lib/libmkl_core.a \
            $MKL_ROOT/lib/libmkl_intel_lp64.a $MKL_ROOT/lib/libmkl_sequential.a \
            $MKL_ROOT/lib/libmkl_core.a \
            -lpthread -lm  -framework JavaVM"
        else 
	MKL_LIBS="-L$JAVA_HOME/Libraries -L/opt/intel/composerxe/lib/${ARCHD} \
            $MKL_ROOT/lib/libmkl_intel_lp64.a $MKL_ROOT/lib/libmkl_intel_thread.a \
            $MKL_ROOT/lib/libmkl_core.a \
            $MKL_ROOT/lib/libmkl_intel_lp64.a $MKL_ROOT/lib/libmkl_intel_thread.a \
            $MKL_ROOT/lib/libmkl_core.a \
            -liomp5 -lpthread -lm  -framework JavaVM"
        fi
        CUDA_LIBS="-L${CUDA_HOME}/lib -L${JCUDA_HOME}/lib -lcudart -lCommonJNI"
elif [ "$OS" = "linux" ] ; then
        MKL_ROOT="/opt/intel/mkl"
        JAVA_HOME="/usr/java/default"
        CUDA_HOME="/usr/local/cuda"
        BIDMAT_HOME="`pwd`/../.."
        JCUDA_HOME="$BIDMAT_HOME/../JCUDA5"
        CC="icc"
        GCC="g++"
        NVCC="nvcc"
        NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine 64  -Xcompiler \"-fPIC -c -O2 -g -DNDEBUG\""
        SUBLIB=linux64
	OBJ="o"
	OUTFLG="-o "
	CPPFLAGS="-fPIC -c -O2 -DNDEBUG  -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -I$JCUDA_HOME/CommonJNI/src -I$CUDA_HOME/include" 
	CFLAGS="-fPIC -c -O2 -openmp -std c99 -DNDEBUG -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -I$MKL_ROOT/include -I$MKL_ROOT/include/intel64/lp64"
	LB="ar rc"    
	GLD="g++ -shared"
	LD="icc -shared -static-intel"
	LDFLAGS="$LDFLAGS"
	LIBPREPEND="lib"
	LIBAPPEND="-linux-x86_64.so"
	FC="gfortran"
	FFLAGS="$CFLAGS"
	LAPACK_INCLUDES=""
	FORTRAN_LIBS="-lgfortran"
	if [ "$PARLIB" = "sequential" ] ; then
	MKL_LIBS="-L$JAVA_HOME/lib -L/opt/intel/composerxe/lib/intel64 \
            $MKL_ROOT/lib/intel64/libmkl_intel_lp64.a -Wl,--start-group  \
            $MKL_ROOT/lib/intel64/libmkl_sequential.a $MKL_ROOT/lib/intel64/libmkl_core.a \
            -Wl,--end-group -liomp5 -lpthread -lm"
        else 
	MKL_LIBS="-L$JAVA_HOME/lib -L/opt/intel/composerxe/lib/intel64 \
            $MKL_ROOT/lib/intel64/libmkl_intel_lp64.a -Wl,--start-group  \
            $MKL_ROOT/lib/intel64/libmkl_intel_thread.a $MKL_ROOT/lib/intel64/libmkl_core.a \
            -Wl,--end-group -liomp5 -lpthread -lm"
        fi
        CUDA_LIBS="-L${CUDA_HOME}/lib64 -L${JCUDA_HOME}/lib -lcudart -lCommonJNI"
elif [ "$OS" = "windows" ] ; then
        MKL_ROOT="c:/Intel/MKL"
        CUDA_HOME="C:/Progra~1/NVIDIA~2/CUDA/v5.0"
        JCUDA_HOME="/code/JCUDA5"
        JAVA_HOME="C:/Progra~1/Java/jdk1.6.0_29"
	CC="icl"
	GCC="icl"
	NVCC="nvcc"
	SUBLIB=win64
	OBJ="obj"
	OUTFLG="/OUT:"
	CPPFLAGS="/c /MT /DNDEBUG /O2 /Qstd=c99 /Qopenmp $CFLAGS"    # static linking
        NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine 64  -Xcompiler \"/EHsc /W3 /nologo /O2 /Zi  /MT\""
	CFLAGS="/c /MT /DNDEBUG /O2 /Qstd=c99 /Qopenmp $CFLAGS"    # static linking
	LB="lib"    
	LD="link"
	GLD="link"
	LDFLAGS="/DLL /MACHINE:AMD64 $LDFLAGS"
	LIBPREPEND=""
	LIBAPPEND="-windows-x86_64.dll"
	FC="ifort"
	FFLAGS="-c $FFLAGS"
	LAPACK_INCLUDES=""
	FORTRAN_LIBS=""
	if [ "$PARLIB" = "sequential" ] ; then
	MKL_LIBS="mkl_intel_lp64.lib mkl_sequential.lib mkl_core.lib libiomp5mt.lib"   
        else
	MKL_LIBS="mkl_intel_lp64.lib mkl_intel_thread.lib mkl_core.lib libiomp5mt.lib" 
        fi
        CUDA_LIBS="cudart.lib CommonJNI.lib"
	LIB="$MKL_ROOT/mkl/lib/intel64;$MKL_ROOT/compiler/lib/intel64;$JAVA_HOME/lib;$CUDA_HOME/lib/x64;$JCUDA_HOME/lib;$LIB"
	INCLUDE="$JAVA_HOME/include;$JAVA_HOME/include/win32;c:/Intel/MKL/mkl/include;$JCUDA_HOME/CommonJNI/src;$CUDA_HOME/include;$INCLUDE"
else
	echo "OS not supported"
	exit 1
fi

echo "Creating config for $OS $ARCH"

echo "CC=$CC" > Makefile.incl
echo "GCC=$GCC" >> Makefile.incl
echo "NVCC=$NVCC" >> Makefile.incl
echo "NVCCFLAGS=$NVCCFLAGS" >> Makefile.incl
echo "SUBLIB=$SUBLIB" >> Makefile.incl
echo "OBJ=$OBJ" >> Makefile.incl
echo "OUTFLG=$OUTFLG" >> Makefile.incl
echo "CPPFLAGS=$CPPFLAGS" >> Makefile.incl
echo "CFLAGS=$CFLAGS" >> Makefile.incl
echo "LB=$LB" >> Makefile.incl
echo "LD=$LD" >> Makefile.incl
echo "GLD=$GLD" >> Makefile.incl
echo "LDFLAGS=$LDFLAGS" >> Makefile.incl
echo "LIBPREPEND=$LIBPREPEND" >> Makefile.incl
echo "LIBAPPEND=$LIBAPPEND" >> Makefile.incl
echo "LAPACK_INCLUDES=$LAPACK_INCLUDES" >> Makefile.incl
echo "MKL_LIBS=$MKL_LIBS" >> Makefile.incl
echo "CUDA_LIBS=$CUDA_LIBS" >> Makefile.incl
echo "FORTRAN_LIBS=$FORTRAN_LIBS" >> Makefile.incl
echo "FC=$FC" >> Makefile.incl
echo "FFLAGS=$FFLAGS" >> Makefile.incl
echo "LIB=$LIB" >> Makefile.incl
echo "INCLUDE=$INCLUDE" >> Makefile.incl
echo "JCUDA_COMMON=$JCUDA_HOME/CommonJNI/src" >> Makefile.incl


