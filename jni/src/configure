#!/bin/bash

OS=`uname -a`
PARLIB=$1
ARCH=`arch`
 
VERSION="dev"

# standardise the OS and ARCH names
if [[ "$OS" == Darwin* ]] ; then
    if [[ "$OS" == *x86_64 ]] ; then
	    ARCH="x86_64"
    fi
    OS="apple"
elif [[ "$OS" == Linux* ]] ; then
    OS="linux"
elif [[ "$OS" == CYGWIN* ]] ; then
    if [[ "$OS" == *WOW64* ]] ; then
        ARCH="x86_64"
    fi
	OS="windows"
else
    echo "OS not supported" $OS
    exit 1
fi

if [ "$ARCH" = "x86" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "i586" ] \
	|| [ "$ARCH" = "i486" ] || [ "$ARCH" = "i386" ] ; then
    ARCH="x86"
    ARCHD=ia32
    SUBDIR=""
    PTYPE=""
    MBITS=32
elif [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ] ; then
    ARCH="x86_64"
    ARCHD=intel64
    SUBDIR=/lp64
    PTYPE=_lp64
    MBITS=64
else
	echo "ARCH not supported"
	exit 1
fi

echo "Creating config for $OS $ARCH"

if [ "$OS" = "apple" ] ; then
    MKL_ROOT="/opt/intel/mkl"
    COMPOSER_ROOT="/opt/intel/composerxe"
    JAVA_HOME="/System/Library/Frameworks/JavaVM.framework"
    CUDA_HOME="/usr/local/cuda"
    JCUDA_HOME="$HOME/code/JCUDA5"
    CC="icc"
    GCC="gcc"
    NVCC="nvcc"
    NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine ${MBITS}  -Xcompiler \"-fPIC -c -O2 -g -DNDEBUG\""
    OBJ="o"
    OUTFLG="-o "
    CPPFLAGS="-fPIC -c -O2 -fopenmp -DNDEBUG -I$JAVA_HOME/Headers -I$JCUDA_HOME/CommonJNI/src -I$CUDA_HOME/include"
    CFLAGS="-fPIC -c -O2 -openmp -std=c99 -DNDEBUG -I$JAVA_HOME/Headers -I$MKL_ROOT/include -I$MKL_ROOT/include/${ARCHD}${SUBDIR}"
    LB="ar rc"    
    GLD="icc -bundle -static-intel"
    LD="icc -bundle -static-intel"
    LDFLAGS="$LDFLAGS"
    LIBPREPEND="lib"
    LIBAPPEND="-${OS}-${ARCH}.dylib"
    FC="gfortran"
    FFLAGS="$CFLAGS"
    LAPACK_INCLUDES=""
    FORTRAN_LIBS="-lgfortran"
    if [ "$PARLIB" = "sequential" ] ; then
	    MKL_LIBS="-L$JAVA_HOME/Libraries -L${COMPOSER_ROOT}/lib/${ARCHD} \ 
            $MKL_ROOT/lib/libmkl_intel${PTYPE}.a $MKL_ROOT/lib/libmkl_sequential.a \
            $MKL_ROOT/lib/libmkl_core.a \
            $MKL_ROOT/lib/libmkl_intel${PTYPE}.a $MKL_ROOT/lib/libmkl_sequential.a \
            $MKL_ROOT/lib/libmkl_core.a \
            -lpthread -lm  -framework JavaVM"
    else 
	    MKL_LIBS="-L$JAVA_HOME/Libraries -L${COMPOSER_ROOT}/lib/${ARCHD} \
            $MKL_ROOT/lib/libmkl_intel${PTYPE}.a $MKL_ROOT/lib/libmkl_intel_thread.a \
            $MKL_ROOT/lib/libmkl_core.a \
            $MKL_ROOT/lib/libmkl_intel${PTYPE}.a $MKL_ROOT/lib/libmkl_intel_thread.a \
            $MKL_ROOT/lib/libmkl_core.a ${COMPOSER_ROOT}/lib/libiomp5.a \
            -lpthread -lm  -framework JavaVM"
    fi
    CUDA_LIBS="-L${CUDA_HOME}/lib -L${JCUDA_HOME}/lib -lcudart -lCommonJNI"
elif [ "$OS" = "linux" ] ; then
    MKL_ROOT="/opt/intel/mkl"
    JAVA_HOME="/usr/java/default"
    CUDA_HOME="/usr/local/cuda"
    BIDMAT_HOME="`pwd`/../.."
    JCUDA_HOME="$BIDMAT_HOME/../JCUDA5"
    CC="gcc"
    GCC="g++"
    NVCC="nvcc"
    NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine ${MBITS}  -Xcompiler \"-fPIC -c -O2 -g -DNDEBUG\""
    OBJ="o"
    OUTFLG="-o "
    CPPFLAGS="-fPIC -c -O2 -fopenmp -DNDEBUG  -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -I$JCUDA_HOME/CommonJNI/src -I$CUDA_HOME/include" 
    CFLAGS="-fPIC -c -O2 -fopenmp -DNDEBUG -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -I$MKL_ROOT/include -I$MKL_ROOT/include/${ARCHD}${SUBDIR}"
    LB="ar rc"    
    GLD="g++ -shared"
    LD="icc -shared -static-intel"
    LDFLAGS="$LDFLAGS"
    LIBPREPEND="lib"
    LIBAPPEND="-${OS}-${ARCH}.so"
    FC="gfortran"
    FFLAGS="$CFLAGS"
    LAPACK_INCLUDES=""
    FORTRAN_LIBS="-lgfortran"
    if [ "$PARLIB" = "sequential" ] ; then
	    MKL_LIBS="-L$JAVA_HOME/lib -L${COMPOSER_ROOT}/lib/${ARCHD} \
            $MKL_ROOT/lib/${ARCHD}/libmkl_intel${PTYPE}.a -Wl,--start-group  \
            $MKL_ROOT/lib/${ARCHD}/libmkl_sequential.a $MKL_ROOT/lib/${ARCHD}/libmkl_core.a \
            -Wl,--end-group -liomp5 -lpthread -lm"
    else 
	    MKL_LIBS="-L$JAVA_HOME/lib -L${COMPOSER_ROOT}/lib/${ARCHD} \
            $MKL_ROOT/lib/${ARCHD}/libmkl_intel${PTYPE}.a -Wl,--start-group  \
            $MKL_ROOT/lib/${ARCHD}/libmkl_gnu_thread.a $MKL_ROOT/lib/${ARCHD}/libmkl_core.a \
            -Wl,--end-group -liomp5 -lpthread -lm"
    fi
    if [ "$ARCH" = "x86" ] ; then
        CULIB="lib"
    else
        CULIB="lib64"
    fi
    CUDA_LIBS="-L${CUDA_HOME}/${CULIB} -L${JCUDA_HOME}/lib -lcudart -lCommonJNI"
elif [ "$OS" = "windows" ] ; then
    CUDA_HOME="$CUDA_PATH"
    JCUDA_HOME="/code/JCUDA5"
    MKL_ROOT="$MKLROOT"
    CC="icl"
    GCC="icl"
    NVCC="nvcc"
    OBJ="obj"
    OUTFLG="/OUT:"
    CPPFLAGS="/c /MT /DNDEBUG /O2 /Qstd=c99 /Qopenmp $CFLAGS"    # static linking
    NVCCFLAGS="-c -use_fast_math -gencode arch=compute_20,code=sm_20 \
          -gencode arch=compute_30,code=sm_30 \
          --machine ${MBITS}  -Xcompiler \"/EHsc /W3 /nologo /O2 /Zi  /MT\""
    CFLAGS="/c /MT /DNDEBUG /O2 /Qstd=c99 /Qopenmp $CFLAGS"    # static linking
    LB="lib"    
    LD="link"
    GLD="link"
    if [ "$ARCH" = "x86" ] ; then
        WINARCH=x86
        CULIB="Win32"
        PTYPE="_c"
    else
        WINARCH=amd64
        CULIB="x64"
        PTYPE="_lp64"
    fi
    LDFLAGS="/DLL /MACHINE:${WINARCH} $LDFLAGS"
    LIBPREPEND=""
    LIBAPPEND="-${OS}-${ARCH}.dll"
    FC="ifort"
    FFLAGS="-c $FFLAGS"
    LAPACK_INCLUDES=""
    FORTRAN_LIBS=""
    if [ "$PARLIB" = "sequential" ] ; then
	    MKL_LIBS="mkl_intel${PTYPE}.lib mkl_sequential.lib mkl_core.lib libiomp5mt.lib"   
    else
	    MKL_LIBS="mkl_intel${PTYPE}.lib mkl_intel_thread.lib mkl_core.lib libiomp5mt.lib" 
    fi
    CUDA_LIBS="cudart.lib CommonJNI.lib"
    LIB="$MKL_ROOT/lib/${ARCHD};$JAVA_HOME/lib;$CUDA_HOME/lib/${CULIB};$JCUDA_HOME/lib;$LIB"
    INCLUDE="$JAVA_HOME/include;$JAVA_HOME/include/win32;c:/Intel/MKL/mkl/include;$JCUDA_HOME/CommonJNI/src;$CUDA_HOME/include;$INCLUDE"
else
    echo "OS not supported"
    exit 1
fi

echo "CC=$CC" > Makefile.incl
echo "GCC=$GCC" >> Makefile.incl
echo "NVCC=$NVCC" >> Makefile.incl
echo "NVCCFLAGS=$NVCCFLAGS" >> Makefile.incl
echo "SUBLIB=$SUBLIB" >> Makefile.incl
echo "OBJ=$OBJ" >> Makefile.incl
echo "OUTFLG=$OUTFLG" >> Makefile.incl
echo "CPPFLAGS=$CPPFLAGS" >> Makefile.incl
echo "CFLAGS=$CFLAGS" >> Makefile.incl
echo "LB=$LB" >> Makefile.incl
echo "LD=$LD" >> Makefile.incl
echo "GLD=$GLD" >> Makefile.incl
echo "LDFLAGS=$LDFLAGS" >> Makefile.incl
echo "LIBPREPEND=$LIBPREPEND" >> Makefile.incl
echo "LIBAPPEND=$LIBAPPEND" >> Makefile.incl
echo "LAPACK_INCLUDES=$LAPACK_INCLUDES" >> Makefile.incl
echo "MKL_LIBS=$MKL_LIBS" >> Makefile.incl
echo "CUDA_LIBS=$CUDA_LIBS" >> Makefile.incl
echo "FORTRAN_LIBS=$FORTRAN_LIBS" >> Makefile.incl
echo "FC=$FC" >> Makefile.incl
echo "FFLAGS=$FFLAGS" >> Makefile.incl
echo "LIB=$LIB" >> Makefile.incl
echo "INCLUDE=$INCLUDE" >> Makefile.incl
echo "JCUDA_COMMON=$JCUDA_HOME/CommonJNI/src" >> Makefile.incl


